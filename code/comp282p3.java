import java.io.File;
import java.io.FileNotFoundException;
import java.util.PriorityQueue;
import java.util.Scanner;
import java.util.Comparator;
import java.lang.Object;
 
// node class is the basic structure
// of each node present in the Huffman - tree.
class HuffmanNode {
 
    int data;
    char c;
 
    HuffmanNode left;
    HuffmanNode right;
}
 
// comparator class helps to compare the node
// on the basis of one of its attribute.
// Here we will be compared
// on the basis of data values of the nodes.
class MyComparator implements Comparator<HuffmanNode> {
    public int compare(HuffmanNode x, HuffmanNode y)
    {
 
        return x.data - y.data;
    }
}
 
public class comp282p3{
 
    //huffman tree traversal
    public static void printCode(HuffmanNode root, String s)
    {
 
        // base case; if the left and right are null
        // then its a leaf node and we print
        // the code s generated by traversing the tree.
        if (root.left
                == null
            && root.right
                   == null
            && Character.isLetter(root.c)) {
 
            // c is the character in the node
            System.out.println(root.c + ":" + s);
 
            return;
        }
 
        // if we go to left then add "0" to the code.
        // if we go to the right add"1" to the code.
 
        // recursive calls for left and
        // right sub-tree of the generated tree.
        printCode(root.left, s + "0");
        printCode(root.right, s + "1");
    }
 
    // main function
    public static void main(String[] args)  throws FileNotFoundException 
    {
        //Scanner for .txt files
        File text = new File("C:/Users/crist/Documents/CSUN/comp282/Huffman/test.txt");
        Scanner scnr = new Scanner(text);
        //number of possible 
        int n = 26;
        int[] charfreq = new int[26];
        char[] charArray = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};
        //breaking the txt file sentences down
        int lineNumber = 1;
        String[] words;
        String line;
        
        while(scnr.hasNextLine()){
            
            
            line = scnr.nextLine();
            words = line.split("\\s+");
            //putting all the words into an array
               for (int ii = 0; ii < words.length; ii++) {
                  words[ii] = words[ii].toLowerCase().replaceAll("[^\\w]", "");
               }
            //printing lines of text file
       
            //System.out.println("line " + lineNumber + " :" + line);
            //lineNumber++;
       
            //setting default char count values to 0 since it will appear 0 times if it is not present in txt
            for(int ab = 0; ab<25; ab++){
                  charfreq[ab] = 0;
               }
               
            //searching our word algorith to find the number of times the letter pops 
            
           for(int i = 0; i < words.length; i++){
                  //going into every word
                  for(int ii = 0; ii<words[i].length(); ii++){
                     //going into every character
                     System.out.println(words[i].charAt(ii));
                     if (true){
                        for(char x : charArray){
                        //if char is in char array
                        	if(x == words[i].charAt(ii)){
                                 for(int ll = 0; ll<25;ll++){
                                    if (words[i].charAt(ii) == charArray[ll]) {
                                    //adding to the frequency counter
                                    charfreq[ll]++;
                                 }
                            }
                        }
                     }
                  }
           }
     } 
     }
        for(int cc = 0; cc<25;cc++){
        //printing char frequency
               System.out.println(charArray[cc] + " appears " + charfreq[cc]+" times");
            }
            //printing out the huffman code that represents a tree in order to compress
        //System.out.println("Huffman Code");
        
        
        
        // creating a priority queue q.
        // makes a min-priority queue(min-heap).
        PriorityQueue<HuffmanNode> q
            = new PriorityQueue<HuffmanNode>(n, new MyComparator());
 
        for (int i = 0; i < n; i++) {
 
            // creating a Huffman node object
            // and add it to the priority queue.
            HuffmanNode hn = new HuffmanNode();
 
            hn.c = charArray[i];
            hn.data = charfreq[i];
 
            hn.left = null;
            hn.right = null;
 
            // add functions adds
            // the huffman node to the queue.
            q.add(hn);
        }
 
        // create a root node
        HuffmanNode root = null;
 
        // Here we will extract the two minimum value
        // from the heap each time until
        // its size reduces to 1, extract until
        // all the nodes are extracted.
        while (q.size() > 1) {
 
            // first min extract.
            HuffmanNode x = q.peek();
            q.poll();
 
            // second min extarct.
            HuffmanNode y = q.peek();
            q.poll();
 
            // new node f which is equal
            HuffmanNode f = new HuffmanNode();
 
            // to the sum of the frequency of the two nodes
            // assigning values to the f node.
            f.data = x.data + y.data;
            f.c = '-';
 
            // first extracted node as left child.
            f.left = x;
 
            // second extracted node as the right child.
            f.right = y;
 
            // marking the f node as the root node.
            root = f;
 
            // add this node to the priority-queue.
            q.add(f);
        }
 
        // print the codes by traversing the tree
        //printCode(root, "");
    }
    }
    
